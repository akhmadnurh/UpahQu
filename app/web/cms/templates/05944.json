{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  // Get data from form\n  const { nama_pengguna, email, nomor_hp, id_jabatan } = req.body;\n  const password = \"12345\";\n\n  // Query\n  // check if email & nomor_hp exist\n  const check_email = await db.pengguna.count({\n    where: {\n      email: email,\n    },\n  });\n  const check_nomor = await db.pengguna.count({\n    where: {\n      nomor_hp: nomor_hp,\n    },\n  });\n  if (check_email > 0 || check_nomor > 0) {\n    reply.send({\n      status: check_email > 0 ? \"email-exist\" : \"nomor-exist\",\n    });\n  } else {\n    // Add data\n    const add = await db.pengguna.create({\n      data: {\n        nama_pengguna: nama_pengguna,\n        email: email,\n        nomor_hp: nomor_hp,\n        password: ext.md5(password),\n        id_role: 2,\n        id_jabatan: id_jabatan,\n        status_pengguna: \"active\",\n      },\n    });\n\n    // Menambah parameter sesuai dengan default parameter\n    const pengguna = await db.pengguna.findFirst({\n      where: {\n        email: email,\n      },\n    });\n    const default_parameter = await db.parameter_penggajian.findMany({\n      where: {\n        default: true,\n      },\n    });\n\n    // Add parameter\n    for (let i = 0; i < default_parameter.length; i++) {\n      await db.karyawan_parameter_penggajian.create({\n        data: {\n          id_karyawan: pengguna.id_pengguna,\n          id_parameter: default_parameter[i].id_parameter,\n        },\n      });\n    }\n    if (add) {\n      reply.send({\n        status: \"success\",\n      });\n    } else {\n      reply.send({\n        status: \"error\",\n      });\n    }\n  }\n}","figma":{}},"title":"create-karyawan","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"07087","slug":"/api/c-karyawan","site":"*","id":"05944"}