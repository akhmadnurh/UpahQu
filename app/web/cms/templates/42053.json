{"content":{"type":"API","structure":"","server_on_load":"async ({\n  template,\n  params,\n  render,\n  db,\n  req,\n  reply,\n  user,\n  log,\n  ext,\n  isDev,\n}: Server) => {\n  const date = new Date();\n  let data = await db.penggajian.findMany({\n    where: {\n      bulan: (date.getMonth() + 1).toString(),\n      tahun: date.getFullYear().toString(),\n    },\n    include: {\n      status_penggajian: true,\n      pengguna: {\n        include: {\n          jabatan: {\n            include: {\n              departemen: true,\n            },\n          },\n        },\n      },\n    },\n  });\n\n  // Cek apakah data pada bulan ini sudah ada atau belum\n  const karyawan = await db.pengguna.findMany({\n    where: {\n      id_role: 2,\n      status_pengguna: \"active\",\n    },\n  });\n\n  // Jika belum ada, maka tambahkan data\n  let miss_data_pengguna = karyawan;\n  if (karyawan.length > data.length) {\n    for (let i = 0; i < karyawan.length; i++) {\n      for (let j = 0; j < data.length; j++) {\n        if (karyawan[i].id_pengguna == data[j].id_pengguna) {\n          miss_data_pengguna.splice(i, 1);\n        }\n      }\n    }\n    // Dapatkan parameter dari masing\" karyawan yang belum ada\n    for (let i = 0; i < miss_data_pengguna.length; i++) {\n      let params = await db.karyawan_parameter_penggajian.findMany({\n        where: {\n          id_karyawan: miss_data_pengguna[i].id_pengguna,\n        },\n        include: {\n          parameter_penggajian: true,\n        },\n      });\n      miss_data_pengguna[i].params = params;\n      let total = 0;\n      // Hitung total gaji\n      for (let j = 0; j < miss_data_pengguna[i].params.length; j++) {\n        total +=\n          miss_data_pengguna[i].params[j].parameter_penggajian.pendapatan;\n      }\n      miss_data_pengguna[i].total_pendapatan = total;\n\n      // Masukkan ke db\n      await db.penggajian.create({\n        data: {\n          id_pengguna: miss_data_pengguna[i].id_pengguna,\n          nominal: miss_data_pengguna[i].total_pendapatan,\n          bulan: (date.getMonth() + 1).toString(),\n          tahun: date.getFullYear().toString(),\n          id_status: 1,\n        },\n      });\n\n      // Masukkan ke detail penggajian\n      const id_penggajian = await db.penggajian.findFirst({\n        where: {\n          id_pengguna: miss_data_pengguna[i].id_pengguna,\n          bulan: (date.getMonth() + 1).toString(),\n          tahun: date.getFullYear().toString(),\n        },\n      });\n      // Gaji utama\n      await db.detail_penggajian.create({\n        data: {\n          id_penggajian: id_penggajian.id_penggajian,\n          keterangan: \"Gaji Pokok\",\n          nominal: total,\n          jenis: \"pokok\",\n        },\n      });\n\n      // Gaji tambahan\n      await db.detail_penggajian.create({\n        data: {\n          id_penggajian: id_penggajian.id_penggajian,\n          keterangan: \"Bonus\",\n          nominal: 0,\n          jenis: \"bonus\",\n        },\n      });\n\n      // Potongan Gaji\n      await db.detail_penggajian.create({\n        data: {\n          id_penggajian: id_penggajian.id_penggajian,\n          keterangan: \"Potongan\",\n          nominal: 0,\n          jenis: \"potongan\",\n        },\n      });\n    }\n\n    // Refresh data\n    data = await db.penggajian.findMany({\n      where: {\n        bulan: (date.getMonth() + 1).toString(),\n        tahun: date.getFullYear().toString(),\n      },\n      include: {\n        status_penggajian: true,\n        pengguna: {\n          include: {\n            jabatan: {\n              include: {\n                departemen: true,\n              },\n            },\n          },\n        },\n      },\n    });\n  }\n\n  let total = 0;\n  for (let i = 0; i < data.length; i++) {\n    total += data[i].nominal;\n  }\n  reply.send({\n    penggajian: data,\n    total: total,\n  })\n}","figma":{}},"title":"informasi-gaji","type":"cms-template","lang":"","status":"SYSTEM","parent_id":"07087","slug":"/api/informasi-gaji","site":"*","id":"42053"}